/********************************************************************************************************************
*  PCIE CFG																											*
********************************************************************************************************************/
var Edma = xdc.loadPackage ("ti.sdo.edma3.drv.sample");
var drv = xdc.loadPackage ("ti.sdo.edma3.drv");
var rm = xdc.loadPackage ("ti.sdo.edma3.rm");
var Memory = xdc.useModule('xdc.runtime.Memory');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var CpIntc = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');
var ECM = xdc.useModule ("ti.sysbios.family.c64p.EventCombiner");
var C64_Hwi = xdc.useModule ("ti.sysbios.family.c64p.Hwi");
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var halCache = xdc.useModule('ti.sysbios.hal.Cache');

ECM.eventGroupHwiNum[0] = 7;
ECM.eventGroupHwiNum[1] = 8;
ECM.eventGroupHwiNum[2] = 9;
ECM.eventGroupHwiNum[3] = 10;

/* ================ Driver configuration ================ */

/* Load Profiling package */
//var Utils = xdc.loadPackage('ti.utils.profiling');

/* Load and use the PCIE packages */
var devType = "c6678"
var Pcie = xdc.loadPackage('ti.drv.pcie');
Pcie.Settings.enableProfiling = false; 
/* Enable only if soc-specific library should be used */ 
/* Pcie.Settings.socType = devType; */ /* use soc/c6678/src/pcie_soc.c */

/*use CSL package*/
var Csl = xdc.useModule('ti.csl.Settings');
Csl.deviceType = devType;

var HeapBuf =   xdc.useModule('ti.sysbios.heaps.HeapBuf');

//var Log     =   xdc.useModule('xdc.runtime.Log');

var build 	= 	xdc.useModule("ti.sysbios.Build");

//var Clock   =   xdc.useModule ('ti.sysbios.knl.Clock');

var Diags       = xdc.useModule('xdc.runtime.Diags');

var Cache       =   xdc.useModule('ti.sysbios.family.c66.Cache');

var System      =   xdc.useModule('xdc.runtime.System');

/*
** Create a Heap. 
*/
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x300000;
heapMemParams.sectionName = "systemHeap";
Program.global.heap0 = HeapMem.create(heapMemParams);

/* This is the default memory heap. */
Memory.defaultHeapInstance  =   Program.global.heap0;

/* Required if using System_printf to output on the console */
SysStd          		=   xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy     =   SysStd;

